package recorder

import (
	"context"
	"github.com/stretchr/testify/assert"
	"testing"
	"time"
)

var samplePackettcpv4 = []byte{
0x45, 0x00, 0x00, 0x28, 0x6f, 0x55, 0x40, 0x00,
0x80, 0x06, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,
0x09, 0x09, 0x09, 0x09, 0xd2, 0xc8, 0x0f, 0xe6,
0xaf, 0x9b, 0xdc, 0xdd, 0xed, 0xb2, 0x21, 0x6a,
0x50, 0x10, 0xf9, 0x0a, 0x6c, 0xbd, 0x00, 0x00,
}

var samplePacketudpv6 = []byte{
0x60, 0x02, 0xad, 0xa9, 0x00, 0x35, 0x11, 0xff,
0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
0x14, 0xe9, 0x14, 0xe9, 0x00, 0x35, 0xdc, 0x64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x10, 0x5f, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
}

func TestPacketCancellation(t *testing.T) {
	ctx, cancel := context.WithCancel(context.Background())
	done := make(chan struct{})
	queueMock := &QueueMock{}

	go func() {
		err := Packet(ctx, 0, "", queueMock)

		assert.NoError(t, err)
		assert.True(t, queueMock.initialized)
		assert.True(t, queueMock.started)
		assert.True(t, queueMock.stopped)

		done <- struct{}{}
	}()

	cancel()
	select {
	case <-time.After(1 * time.Second):
		t.Fatalf("did not cancel after expected time")
	case <-done:
	}
}

func TestParsePackage(t *testing.T) {
	metric := ParsePayload(&packetMock{data: samplePackettcpv4})
	assert.Equal(t, "TCP", metric.Protocol)
	assert.Equal(t, "8.8.8.8", metric.SourceIp)
	assert.Equal(t, "9.9.9.9", metric.DestinationIp)

	metric = ParsePayload(&packetMock{data: samplePacketudpv6})
	assert.Equal(t, "UDP", metric.Protocol)
	assert.Equal(t, "1111:1111:1111:1111:1111:1111:1111:1111", metric.SourceIp)
	assert.Equal(t, "2222:2222:2222:2222:2222:2222:2222:2222", metric.DestinationIp)
}

func BenchmarkHandlePayload(b *testing.B) {
	for i := 0; i < b.N; i++ {
		HandlePayload(&packetMock{data: samplePackettcpv4})
	}
}

func BenchmarkParsePayload(b *testing.B) {
	for i := 0; i < b.N; i++ {
		ParsePayload(&packetMock{data: samplePackettcpv4})
	}
}
